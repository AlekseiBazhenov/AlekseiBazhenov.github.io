---
layout: post
title:  "Проще переписать с нуля"
date:   2020-11-16 19:11:57 +0400
categories: tech
---
Много раз приходилось слышать эту фразу от коллег. В некоторых вакансиях на позицию мобильного разработчика даже встречалось требование «Грамотно спроектировать архитектуру приложение, чтобы потом не переписывать с нуля». Почему так? 

Есть несколько проблем:
- В стартапах объективно никто не знает, что за продукт должен получиться. Это нормальная ситуация. И поэтому разработчики не уделяют внимания архитектуре из-за курса на быстрый выпуск для проверки гипотез.
- В больших компаниях архитекторы обычно сосредоточены на бэкенде.

В клиентских приложениях не нужна архитектура? Нужна. У любой системы есть архитектура.

Одни из основных требований к архитектору приложений - широкий технологический кругозор и большой практический опыт с конкретной технологией. Мобильная разработка достаточно новая область и знаний в ней большинству архитекторов, я считаю, пока не хватает. Поэтому архитектура мобильных приложений как в стартапах, так и в зрелых компаниях ложится на плечи тимлида или разработчика с наибольшим опытом. И поэтому обычно архитектура строится так: перед запуском проекта выбирается MV* шаблон проектирования архитектуры и подбираются необходимые библиотеки. На этом все проектирование архитектуры завершается.

Через несколько лет независимо от тщательности выбора архитектурного паттерна и библиотек в проекте можно встретить классы с 3 тысячами строк кода, дублирование логики, view model’и с зависимостью от 15-ти репозиториев, DI фреймворк превращенный в сервис-локатор. Все это мешает внесению изменений в код и покрытию его тестами.

С развитием любого приложения нужно постоянно вносить в архитектуру изменения для возможности реализовать бизнес-задачи. Если архитектура не эволюционировала вместе с проектом, то в какой-то момент ее становится невозможно изменить за разумные затраты с помощью рефакторинга. Вот и получается, что проще переписать.

Как же этого избежать? Давно хотел разобраться с этим вопросом. В прошлом году прошел обучение на курсе, посвященном архитектуре ПО. Одна из частей курса была посвящена применению архитектурных практик в сочетании с гибкими методологиями. Этот блок оказался самым полезным для меня, так как последние несколько лет работаю в продуктовых компаниях, которые используют Agile. 

Выводы и рекомендации:
- Акцент в архитектуре на модифицируемость, эволюционируемость, минимальные ограничения в будущем
- Для модифицируемость кода использовать паттерны проектирования (GoF, GRASP), SOLID
- Для контроля состояния архитектуры статический анализатор кода
- Взгляд сверху на все приложение в целом (диаграммы UML)